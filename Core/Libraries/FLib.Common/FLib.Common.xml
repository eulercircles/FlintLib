<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FLib.Common</name>
    </assembly>
    <members>
        <member name="T:FLib.Common.Messages">
            <summary>
            Reusable messages.
            </summary>
        </member>
        <member name="F:FLib.Common.Messages.fParameterIsNotAValidType">
            <summary>{0} is the required type and {1} is the passed type.</summary>
        </member>
        <member name="F:FLib.Common.Messages.fUnhandledEnumValue">
            <summary>{0} is the enum member.</summary>
        </member>
        <member name="F:FLib.Common.Messages.fValueMustBeBetween">
            <summary>{0} is the lower bound and {1} is the upper bound.</summary>
        </member>
        <member name="T:FLib.Common.EnumUtilities">
            <summary>
            
            </summary>
        </member>
        <member name="M:FLib.Common.EnumUtilities.GetEnumDescriptions``1">
            <summary>
            Reads all the members of an enumeration and returns a dictionary whose keys are either the value of the description attribute for that member or the string equivalent of the member name,
            and whose values are the enum values that correspond to those descriptions or names. Useful for converting enums to an appropriate format for using in selection lists.
            </summary>
            <remarks>Based on blog by Brandon Truong - http://brandontruong.blogspot.com/2010/04/use-enum-as-itemssource.html</remarks>
        </member>
        <member name="M:FLib.Common.EnumUtilities.GetEnumDescription(System.Reflection.FieldInfo)">
            <remarks>Based on blog by Brandon Truong - http://brandontruong.blogspot.com/2010/04/use-enum-as-itemssource.html</remarks>
        </member>
        <member name="M:FLib.Common.SafeEvent`1.Subscribe(System.EventHandler{`0})">
            <summary>
            Subscribes the handler method to the event. If the handler method is already subscribed, it will *not* be subscribed again.
            </summary>
            <param name="handler"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FLib.Common.SafeEvent`1.Unsubscribe(System.EventHandler{`0})" -->
        <member name="M:FLib.Common.SafeEvent`1.Invoke(System.Object,`0)">
            <summary>
            Invokes the event.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:FLib.Common.Event`1.#ctor(FLib.Common.SafeEvent{`0})">
            <summary>
            
            </summary>
            <param name="innerEvent"></param>
            <exception cref="T:System.ArgumentNullException">If the innerEvent is null.</exception>
        </member>
        <member name="M:FLib.Common.Event`1.Subscribe(System.EventHandler{`0})">
            <summary>
            Subscribes the handler method to the event. If the handler method is already subscribed, it will *not* be subscribed again.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:FLib.Common.Event`1.Unsubscribe(System.EventHandler{`0})">
            <summary>
            Unsubscribes the handler method from the event.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:FLib.Common.EnumerationExtensions.Description(System.Enum)">
            <summary>
            Gets the value of the Description attribute of a single enum member.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
    </members>
</doc>
